#ifndef _Geometry_LightCache_H
#define _Geometry_LightCache_H

#include <Geometry/RGBColor.h>
#include <Geometry/Triangle.h>
#include <map>

namespace Geometry
{
	class LightCache
	{
	public:
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \typedef	::std::pair<int, int> Coordinates
		///
		/// \brief	Defines an alias representing the coordinates (x,y).
		////////////////////////////////////////////////////////////////////////////////////////////////////
		typedef ::std::pair<int, int> Coordinates ;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \typedef	::std::pair<RGBColor, int> TexelRecord
		///
		/// \brief	Defines an alias representing the texel record (color, depth of computation).
		////////////////////////////////////////////////////////////////////////////////////////////////////
		typedef ::std::pair<RGBColor, int> TexelRecord ;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \typedef	::std::map<Coordinates, TexelRecord> TriangleCache
		///
		/// \brief	Defines an alias representing the triangle cache i.e. the association between local 
		/// 		triangle coordinates and the texel record.
		////////////////////////////////////////////////////////////////////////////////////////////////////
		typedef ::std::map<Coordinates, TexelRecord> TriangleCache ;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \typedef	::std::map<const Triangle *, TriangleCache> Cache
		///
		/// \brief	Defines an alias representing the light cache i.e. association between triangle and
		/// 		triangle cache.
		////////////////////////////////////////////////////////////////////////////////////////////////////
		typedef ::std::map<const Triangle *, TriangleCache> Cache ;

	protected:
		/// \brief	The cache.
		Cache m_cache ;

	public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \fn	LightCache::LightCache()
		///
		/// \brief	Default constructor.
		///
		/// \author	F. Lamarche, Université de Rennes 1
		/// \date	07/12/2013
		////////////////////////////////////////////////////////////////////////////////////////////////////
		LightCache()
		{}

		TriangleCache & getTriangleCache(const Triangle * triangle)
		{
			return m_cache[triangle] ;
		}


	};
}

#endif